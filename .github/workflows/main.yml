name: pipeline

on:
  push:
    branches: [ '**', '!ga-ignore-**' ]
  pull_request:
    branches: [ '**', '!ga-ignore-**' ]
env:
  MIRROR_URL: ""
  EXECUTABLES: "binary"
  ARGUMENTS: ""
jobs:
  check_repository_cleanliness:
    name: Repository Cleanliness
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Checks if the repository is clean
        run: |
          ERROR=0;
          for i in $(find ! -path "./.git/**" -name \* ! -name ".git" -type f);
          do
            if [[ "$(basename -- "$i")" =~ ^(#).*(#)$ ]]; then
              echo "::error file=${i:2},title=Unwanted file detected::${i:2}";
              ERROR=1;
            elif [[ "$(basename -- "$i")" =~ .*~ ]]; then
              echo "::error file=${i:2},title=Unwanted file detected::${i:2}";
              ERROR=1;
            elif [[ "$(basename -- "$i")" =~ .*pain_au_chocolat.* ]]; then
              echo "::error file=${i:2},title=Unwanted file detected::${i:2}";
              ERROR=1;
            elif [[ "$(basename -- "$i")" =~ .*(.o|.a|.so|.gcno|.gcda|.gcov)$ ]]; then
              echo "::error file=${i:2},title=Unwanted file detected::${i:2}";
              ERROR=1;
            fi
          done
          for i in $(find ! -path "./.git/**" -name \* ! -name ".git" -type d);
          do
            if [[ "$(basename -- "$i")" =~ .*tmp ]]; then
              for j in $(find -path "$i/*" -name \* -type f);
              do
                echo "::error file=${j:2},title=Unwanted file detected::${j:2}";
                ERROR=1;
              done
            fi
          done
          if [[ ERROR -eq 1 ]]; then
            exit 1;
          fi
  check_program_compilation:
    name: Build
    needs: check_repository_cleanliness
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest

    steps:
      - uses: actions/checkout@v3

      - name: compil
        run: |
          timeout 120 make
      - name: clean temp files
        run: |
          make clean
      - name: check exe
        run: |
          for i in $(echo $EXECUTABLES | tr "," " ");
          do
            if test -f "$i"; then
              if [[ "$(stat -c %a "$i")" =~ ^(5|7).* ]]; then
                echo "$i have permissions";
              else
                exit 1;
              fi
            else
              exit 1;
            fi
          done
        env:
          EXECUTABLES: ${{ secrets.EXECUTABLES }}

  run_tests:
    name: Units Tests
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest

    steps:
      - uses: actions/checkout@v3

      - name: compil with exe
        run: |
          timeout 120 make run_tests
          
  coding_style:
    environment: xschahl/Epitech
    name: Coding Style
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: installing pycparser
        run: python -m pip install pycparser
      - name: installing coding style
        run: ${{ secrets.CODING_STYLE_REPOSITORY }}
      - name: check coding style
        run: ${{ secrets.CODING_STYLE_ACTION }}

  push_to_mirror:
    environment: xschahl/Epitech
    needs: coding_style
    if: ${{ github.event_name == 'push' }}
    name: "Push"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1.1.1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH }}
